/**
  @module menubar
  @description Contains Menubar class
  @author Vincent Zimmer
  @version 3.0.0
  @requires [Tooltip] (optional)
*/

// Some parts generated by ChatGPT
export default class Menubar {
  /**
    Constructor for Menubar class

    @param {object} options: Other options for menubar (optional)
      Values:
        - animationDuration {int} (default 400): Time in ms to animate elements
        - contactThreshold {int} (default 575): Max window width to animate the contact info with the menubar

    @return {void}
  */
  constructor(options = {}) {
    this.main = document.querySelector("main") // Get main element, this allows clicking outside mobile menu to close it
    this.header = document.querySelector("header") // Get menubar element
    this.contact = this.header.querySelector("#contact") // Get element with contact info (for animations)
    this.toggle = this.header.querySelector("#menu-toggle input[type]") // Get menu toggle checkbox
    this.nav = this.header.querySelector("#navigation") // Get navigation element with all buttons
    this.menuButtons = this.nav.querySelectorAll("nav > *") // Get navigation elements (a)
    this.buttons = [...this.menuButtons, ...this.nav.querySelectorAll(":scope > *:not(:first-child)")] // Put all buttons together
    this.scrollPorgress = this.header.querySelector("#scroll-progress") // Get element for scroll progress bar
    this.animationToggle = this.nav.querySelector("#animation-toggle") // Get animation toggle label (to update tooltip)
    this._mobileMenuShowing = false // Mobile menu is hidden by default
    this.animationDuration = options?.animationDuration ?? 400 // Animation duration for elements (like the navigation buttons)
    this.contactThreshold = options?.contactThreshold ?? 575 // The max window width to animate the contact info with the menubar
    this.animationToggle.style.display = "" // Show animation toggle button
    if (window.animations) {this.header.classList.add("animated")} // Add animated class if needed
    // Bind functions to this instance
    this._hideMenuTap = this._hideMenuTap.bind(this)
    this._buttonClick = this._buttonClick.bind(this)
    // Add event listeners
    this.menuButtons.forEach(element => { // Add listener to all buttons and remove href attribute
      element.addEventListener("click", this._buttonClick)
      element.removeAttribute("href")
    })
    this.toggle.addEventListener("change", event => this._toggleMobileMenu(event.target.checked)) // Toggle mobile menu if checkbox is clicked
    window.addEventListener("resize", () => this._toggleMobileMenu(false)) // Hide mobile menu if the window is resized
    window.addEventListener("scroll", this._scroll.bind(this)) // Update scroll progress and hide mobile menu while scrolling
    this.animationToggle.querySelector("input[type]").addEventListener("change", this._toggleAnimations.bind(this)) // Toggle animations if animation toggle checkbox is clicked
  }

  /**
    Toggles animations for all animated elements (including menubar, tooltips, and gradient)
    To be used as event listener for animation toggle checkbox

    @param {Event} event

    @return {void}
  */
  _toggleAnimations(event) {
    window.animations = !event.target.checked // Update global value
    const newEvent = new CustomEvent("toggleAnimation", {detail: {animations: window.animations}}) // Initialize custom event
    this.header.classList.toggle("animated") // Toggle menubar animations
    // Loop thru all animated elements and dispatch custom event
    document.querySelectorAll("[data-animated], .tilt-animation, [title]").forEach(element => element.dispatchEvent(newEvent))
    this.animationToggle.tooltip.setText(event.target.checked ? "Play animations" : "Stop animations") // Update toggle tooltip
  }

  /**
    Toggles mobile menubar

    @param {boolean} show

    @return {void}
  */
  _toggleMobileMenu(show) {
    if (show && !this._mobileMenuShowing) { // Show menu if not already showing
      this._mobileMenuShowing = true
      this.toggle.checked = true
      this.header.classList.add("active")
      if (window.animations) { // If animations
        for (let i = 0; i < this.buttons.length; i++) { // Loop thru all buttons
          this._animateElement(this.buttons[i], "pop-in", (i / 5.5) * 1000) // Add animation in effect
        }
        // Animate contact info if needed
        if (window.innerWidth <= this.contactThreshold) {
          this._animateElement(this.contact, "fade-in", ((this.buttons.length - 1) / 5.5) * 1000)
        }
      }
      this.header.style.height = this.header.getBoundingClientRect().height + this.nav.getBoundingClientRect().height + "px" // Update menubar height to show buttons
      this.main.addEventListener("click", this._hideMenuTap) // Add listener to main so that if clicked the menu will close
    } else if (!show && this._mobileMenuShowing) { // Hide menu if not already hidden
      this._mobileMenuShowing = false
      this.toggle.checked = false
      this.header.classList.remove("active")
      if (window.animations) { // If animations
        for (let i = 0; i < this.buttons.length; i++) { // Loops thru all buttons
          this._animateElement(this.buttons[i], "pop-out", ((this.buttons.length - i) * 90) - 90) // Add animation out effect
        }
        // Animate contact info if needed
        if (window.innerWidth <= this.contactThreshold) {this._animateElement(this.contact, "fade-out", 0)}
      }
      this.header.style.height = "" // Reset menubar height
      this.main.removeEventListener("click", this._hideMenuTap)
    }
  }

  /**
    Hides menubar, to be used with event listener on main element

    @param none

    @return {void}
  */
  _hideMenuTap() {
    this._toggleMobileMenu(false)
  }

  /**
    Scrolls to corresponding button's section element
    Menu hides automatically with scroll listener

    @param {Event} event

    @return {void}
  */
  _buttonClick(event) {
    // Get section element's ID with the button's text, replace spaces with '-', and make lowercase
    window.scroll({top: Math.max(document.querySelector('#' + event.target.innerHTML.trim().toLowerCase().replaceAll(' ', '-')).offsetTop, 0), behavior: "smooth"}) // Scroll section into view
  }

  /**
    Animates input element with the animationClass, removes CSS class after animation has been played

    @param {HTMLElement} element: Element to apply animations to
    @param {string} animationClass: CSS animation class to add to element
    @param {int} delay: CSS animation-delay value in ms

    @return {void}
  */
  _animateElement(element, animationClass, delay) {
    element.style.animationDelay = delay + "ms"
    element.classList.add(animationClass)
    setTimeout(() => {
      element.classList.remove(animationClass)
      element.style.animationDelay = ""
    }, delay + this.animationDuration)
  }

  /**
    Updates scroll progress element and hides mobile menu

    @param none

    @return {void}
  */
  _scroll() {
    this.scrollPorgress.style.width = (((document.documentElement.scrollTop || document.body.scrollTop) / (document.documentElement.scrollHeight - window.innerHeight)) * 100) + "vw"
    this._toggleMobileMenu(false)
  }
}
